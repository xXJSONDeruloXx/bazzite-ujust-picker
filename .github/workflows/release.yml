name: Build and Release

on:
  push:
    branches:
      - master
      - main
    tags:
      - '*'

permissions:
  contents: write

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    # Only run on push to main/master and not on tag creation
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && !startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Tag and Release
        run: |
          # Get the current date in YYYY-MM-DD format
          CURRENT_DATE=$(date +"%Y-%m-%d")
          
          # Fetch all tags
          git fetch --tags
          
          # Check if there are any tags for today
          TODAY_TAGS=$(git tag -l "$CURRENT_DATE*" --sort=-committerdate)
          
          if [ -z "$TODAY_TAGS" ]; then
            # No tags for today yet, create the first one
            NEW_TAG="$CURRENT_DATE"
          else
            # Get the latest tag for today
            LATEST_TODAY_TAG=$(echo "$TODAY_TAGS" | head -n 1)
            
            # Check if the tag has a counter suffix
            if [[ "$LATEST_TODAY_TAG" =~ $CURRENT_DATE\.(.*) ]]; then
              # Extract the counter and increment it
              COUNTER="${BASH_REMATCH[1]}"
              NEXT_COUNTER=$((COUNTER + 1))
              NEW_TAG="$CURRENT_DATE.$NEXT_COUNTER"
            else
              # First counter for today
              NEW_TAG="$CURRENT_DATE.1"
            fi
          fi
          
          echo "Creating new tag: $NEW_TAG"
          
          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create and push tag
          git tag -a $NEW_TAG -m "Auto-generated release $NEW_TAG"
          git push origin $NEW_TAG

  release:
    runs-on: ubuntu-latest
    # Run this job when a tag is pushed or after auto-tag job completes
    needs: [auto-tag]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Tag and Release
        run: |
          # Get the current date in YYYY-MM-DD format
          CURRENT_DATE=$(date +"%Y-%m-%d")
          
          # Fetch all tags
          git fetch --tags
          
          # Check if there are any tags for today
          TODAY_TAGS=$(git tag -l "$CURRENT_DATE*" --sort=-committerdate)
          
          if [ -z "$TODAY_TAGS" ]; then
            # No tags for today yet, create the first one
            NEW_TAG="$CURRENT_DATE"
          else
            # Get the latest tag for today
            LATEST_TODAY_TAG=$(echo "$TODAY_TAGS" | head -n 1)
            
            # Check if the tag has a counter suffix
            if [[ "$LATEST_TODAY_TAG" =~ $CURRENT_DATE\.(.*) ]]; then
              # Extract the counter and increment it
              COUNTER="${BASH_REMATCH[1]}"
              NEXT_COUNTER=$((COUNTER + 1))
              NEW_TAG="$CURRENT_DATE.$NEXT_COUNTER"
            else
              # First counter for today
              NEW_TAG="$CURRENT_DATE.1"
            fi
          fi
          
          echo "Creating new tag: $NEW_TAG"
          
          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create and push tag
          git tag -a $NEW_TAG -m "Auto-generated release $NEW_TAG"
          git push origin $NEW_TAG
